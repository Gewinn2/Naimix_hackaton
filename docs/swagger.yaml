basePath: /
definitions:
  entities.Aspect:
    properties:
      aspect:
        type: string
      orbit:
        type: number
      p1_name:
        type: string
      p2_name:
        type: string
    type: object
  entities.CompanyMemberInfo:
    properties:
      name:
        type: string
      position:
        type: integer
      surname:
        type: string
      third_name:
        type: string
      user_id:
        type: integer
    type: object
  entities.CosmogramApiResponseBody:
    properties:
      aspects:
        items:
          $ref: '#/definitions/entities.Aspect'
        type: array
      data:
        $ref: '#/definitions/entities.Data'
      is_destiny_sign:
        type: boolean
      score:
        type: integer
      score_description:
        type: string
      status:
        type: string
    type: object
  entities.CosmogramRequestBody:
    properties:
      candidate:
        $ref: '#/definitions/entities.User'
      staff:
        items:
          $ref: '#/definitions/entities.User'
        type: array
    type: object
  entities.CreateCompanyRequest:
    properties:
      name:
        type: string
    type: object
  entities.CreateCompanyResponse:
    properties:
      id:
        type: integer
    type: object
  entities.CreateUserRequest:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: P@ssw0rd123
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      role:
        example: HR manager
        type: string
      surname:
        example: Doe
        type: string
      third_name:
        example: Middle
        type: string
    type: object
  entities.CreateUserResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiRXhwaXJlc0F0IjoxNzMxNzE1ODM0LCJJc3N1ZWRBciI6MTczMTY5NDIzNH0sInVzZXJfaWQiOjJ9.4PZY_8iDHCeACmPs5woqtowvCrrByTB4Gadr6oLdlZg
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiRXhwaXJlc0F0IjoxNzM0MzAwNjM0LCJJc3N1ZWRBciI6MTczMTY5NDIzNH0sInVzZXJfaWQiOjJ9.o9i-1GBcLtUR0SpDNiBuHfzQWHBt465bhxcC_X2WqBY
        type: string
    type: object
  entities.Data:
    properties:
      first_subject:
        $ref: '#/definitions/entities.Subject2'
      second_subject:
        $ref: '#/definitions/entities.Subject2'
    type: object
  entities.ErrorResponse:
    properties:
      error:
        example: Invalid data provided
        type: string
    type: object
  entities.LoginUserRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@ssw0rd123
        type: string
      phone_number:
        example: "+1234567890"
        type: string
    type: object
  entities.LoginUserResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiRXhwaXJlc0F0IjoxNzMxNzE1ODM0LCJJc3N1ZWRBciI6MTczMTY5NDIzNH0sInVzZXJfaWQiOjJ9.4PZY_8iDHCeACmPs5woqtowvCrrByTB4Gadr6oLdlZg
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiRXhwaXJlc0F0IjoxNzM0MzAwNjM0LCJJc3N1ZWRBciI6MTczMTY5NDIzNH0sInVzZXJfaWQiOjJ9.o9i-1GBcLtUR0SpDNiBuHfzQWHBt465bhxcC_X2WqBY
        type: string
    type: object
<<<<<<< HEAD
  entities.TaroCard:
    properties:
      direct_meaning:
        type: string
      id:
        type: integer
      reverse_meaning:
=======
  entities.Planet:
    properties:
      abs_pos:
        type: number
      element:
        type: string
      emoji:
        type: string
      house:
        type: string
      name:
        type: string
      point_type:
        type: string
      position:
        type: number
      quality:
        type: string
      retrograde:
        type: boolean
      sign:
        type: string
      sign_num:
        type: integer
    type: object
  entities.Subject2:
    properties:
      chiron:
        $ref: '#/definitions/entities.Planet'
      city:
        type: string
      day:
        type: integer
      hour:
        type: integer
      houses_system_identifier:
        type: string
      houses_system_name:
        type: string
      iso_formatted_local_datetime:
        type: string
      iso_formatted_utc_datetime:
        type: string
      julian_day:
        type: number
      jupiter:
        $ref: '#/definitions/entities.Planet'
      lat:
        type: number
      lng:
        type: number
      local_time:
        type: number
      mars:
        $ref: '#/definitions/entities.Planet'
      mean_lilith:
        $ref: '#/definitions/entities.Planet'
      mean_node:
        $ref: '#/definitions/entities.Planet'
      mean_south_node:
        $ref: '#/definitions/entities.Planet'
      mercury:
        $ref: '#/definitions/entities.Planet'
      minute:
        type: integer
      month:
        type: integer
      moon:
        $ref: '#/definitions/entities.Planet'
      name:
        type: string
      nation:
        type: string
      neptune:
        $ref: '#/definitions/entities.Planet'
      perspective_type:
        type: string
      pluto:
        $ref: '#/definitions/entities.Planet'
      saturn:
        $ref: '#/definitions/entities.Planet'
      sidereal_mode:
        type: string
      sun:
        $ref: '#/definitions/entities.Planet'
      tz_str:
        type: string
      uranus:
        $ref: '#/definitions/entities.Planet'
      utc_time:
        type: number
      venus:
        $ref: '#/definitions/entities.Planet'
      year:
        type: integer
      zodiac_type:
>>>>>>> 8c51950ffbe0fe76694f0ab70623b52b48f2ac05
        type: string
    type: object
  entities.User:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      password:
        example: P@ssw0rd123
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      role:
        example: user
        type: string
      surname:
        example: Doe
        type: string
      third_name:
        example: Petrovich
        type: string
    type: object
info:
  contact: {}
  title: Harmony Compass API
  version: "1.0"
paths:
  /company/{id}/members:
    get:
      consumes:
      - application/json
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of company members
          schema:
            items:
              $ref: '#/definitions/entities.CompanyMemberInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get members of a company by ID
      tags:
      - company
  /company/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Company creation request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entities.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.CreateCompanyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Create a new company
      tags:
      - company
  /cosmogram:
    post:
      consumes:
      - application/json
      parameters:
      - description: Get cosmogram data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entities.CosmogramRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CosmogramApiResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get cosmogram
      tags:
      - cosmogram
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User login data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entities.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.LoginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Login user
      tags:
      - user
  /signup:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entities.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Sign up user
      tags:
      - user
  /tarot/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Tarot card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Details of the tarot card
          schema:
            $ref: '#/definitions/entities.TaroCard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get a tarot card by ID
      tags:
      - tarot
  /users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/entities.User'
              type: array
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get all users
      tags:
      - user
swagger: "2.0"
